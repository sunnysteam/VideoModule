package com.robot.common.lib.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.robot.common.lib.databases.VideoTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tb_video".
*/
public class VideoTableDao extends AbstractDao<VideoTable, Long> {

    public static final String TABLENAME = "tb_video";

    /**
     * Properties of entity VideoTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FileType = new Property(1, String.class, "fileType", false, "FILE_TYPE");
        public final static Property FileName = new Property(2, String.class, "fileName", false, "FILE_NAME");
        public final static Property FunctionType = new Property(3, int.class, "functionType", false, "FUNCTION_TYPE");
        public final static Property FilePath = new Property(4, String.class, "filePath", false, "FILE_PATH");
        public final static Property RecordTime = new Property(5, String.class, "recordTime", false, "RECORD_TIME");
        public final static Property CreateBy = new Property(6, String.class, "createBy", false, "CREATE_BY");
        public final static Property CreateDT = new Property(7, String.class, "createDT", false, "CREATE_DT");
        public final static Property UpdateBy = new Property(8, String.class, "updateBy", false, "UPDATE_BY");
        public final static Property UpdateDT = new Property(9, String.class, "updateDT", false, "UPDATE_DT");
    };


    public VideoTableDao(DaoConfig config) {
        super(config);
    }
    
    public VideoTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tb_video\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FILE_TYPE\" TEXT NOT NULL ," + // 1: fileType
                "\"FILE_NAME\" TEXT NOT NULL ," + // 2: fileName
                "\"FUNCTION_TYPE\" INTEGER NOT NULL ," + // 3: functionType
                "\"FILE_PATH\" TEXT NOT NULL ," + // 4: filePath
                "\"RECORD_TIME\" TEXT NOT NULL ," + // 5: recordTime
                "\"CREATE_BY\" TEXT," + // 6: createBy
                "\"CREATE_DT\" TEXT," + // 7: createDT
                "\"UPDATE_BY\" TEXT," + // 8: updateBy
                "\"UPDATE_DT\" TEXT);"); // 9: updateDT
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tb_video\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VideoTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getFileType());
        stmt.bindString(3, entity.getFileName());
        stmt.bindLong(4, entity.getFunctionType());
        stmt.bindString(5, entity.getFilePath());
        stmt.bindString(6, entity.getRecordTime());
 
        String createBy = entity.getCreateBy();
        if (createBy != null) {
            stmt.bindString(7, createBy);
        }
 
        String createDT = entity.getCreateDT();
        if (createDT != null) {
            stmt.bindString(8, createDT);
        }
 
        String updateBy = entity.getUpdateBy();
        if (updateBy != null) {
            stmt.bindString(9, updateBy);
        }
 
        String updateDT = entity.getUpdateDT();
        if (updateDT != null) {
            stmt.bindString(10, updateDT);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VideoTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getFileType());
        stmt.bindString(3, entity.getFileName());
        stmt.bindLong(4, entity.getFunctionType());
        stmt.bindString(5, entity.getFilePath());
        stmt.bindString(6, entity.getRecordTime());
 
        String createBy = entity.getCreateBy();
        if (createBy != null) {
            stmt.bindString(7, createBy);
        }
 
        String createDT = entity.getCreateDT();
        if (createDT != null) {
            stmt.bindString(8, createDT);
        }
 
        String updateBy = entity.getUpdateBy();
        if (updateBy != null) {
            stmt.bindString(9, updateBy);
        }
 
        String updateDT = entity.getUpdateDT();
        if (updateDT != null) {
            stmt.bindString(10, updateDT);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public VideoTable readEntity(Cursor cursor, int offset) {
        VideoTable entity = new VideoTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // fileType
            cursor.getString(offset + 2), // fileName
            cursor.getInt(offset + 3), // functionType
            cursor.getString(offset + 4), // filePath
            cursor.getString(offset + 5), // recordTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // createBy
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // createDT
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // updateBy
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // updateDT
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VideoTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFileType(cursor.getString(offset + 1));
        entity.setFileName(cursor.getString(offset + 2));
        entity.setFunctionType(cursor.getInt(offset + 3));
        entity.setFilePath(cursor.getString(offset + 4));
        entity.setRecordTime(cursor.getString(offset + 5));
        entity.setCreateBy(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreateDT(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUpdateBy(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUpdateDT(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VideoTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VideoTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
